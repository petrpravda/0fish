import {Piece} from './Piece';

const MGS_SOURCE: number[][] = [
  // PAWN(0)
  [
    63, 63, 63, 63, 63, 63, 63, 63,
    147, 147, 153, 147, 149, 149, 161, 161,
    99, 113, 131, 129, 125, 119, 111, 116,
    79, 103, 115, 121, 121, 108, 106, 96,
    80, 87, 108, 113, 110, 92, 83, 83,
    97, 114, 103, 97, 83, 95, 79, 85,
    81, 111, 10811, 59, 53, 72, 82, 73,
    52, 52, 52, 52, 52, 52, 52, 52
  ],
  // KNIGHT(1)
  [
    301, 319, 321, 349, 333, 323, 313, 301,
    331, 355, 386, 364, 380, 386, 332, 312,
    356, 386, 396, 401, 401, 392, 384, 326,
    357, 381, 405, 405, 413, 388, 376, 347,
    351, 381, 387, 396, 382, 380, 363, 339,
    343, 382, 381, 385, 375, 373, 354, 331,
    349, 347, 377, 360, 355, 349, 322, 320,
    319, 339, 333, 343, 327, 313, 332, 286
  ],
  // BISHOP(2)
  [
    327, 349, 339, 343, 341, 337, 345, 327,
    337, 353, 367, 365, 347, 349, 347, 337,
    351, 367, 366, 373, 375, 362, 371, 337,
    353, 362, 378, 383, 383, 372, 353, 352,
    356, 362, 366, 386, 384, 368, 364, 342,
    362, 372, 368, 369, 369, 367, 363, 353,
    350, 386, 372, 362, 354, 373, 364, 361,
    327, 335, 341, 344, 338, 336, 353, 323
  ],
  // ROOK(3)
  [
    491, 489, 497, 499, 499, 491, 496, 498,
    503, 492, 512, 506, 502, 502, 496, 493,
    479, 496, 494, 481, 487, 485, 484, 473,
    472, 469, 489, 483, 482, 482, 464, 463,
    459, 480, 466, 472, 467, 462, 458, 449,
    453, 470, 470, 464, 455, 459, 461, 448,
    448, 461, 481, 461, 455, 453, 459, 448,
    481, 455, 485, 481, 479, 471, 465, 469
  ],
  // QUEEN(4)
  [
    1012, 1022, 1022, 1027, 1023, 1022, 1018, 990,
    1026, 1036, 1036, 1026, 1030, 1020, 1010, 1000,
    1026, 1036, 1041, 1041, 1033, 1025, 1010, 1000,
    1025, 1032, 1039, 1039, 1019, 1015, 1010, 1005,
    1015, 1026, 1025, 1029, 1017, 1015, 1010, 1010,
    1018, 1028, 1021, 1019, 1019, 1017, 1017, 1000,
    1012, 1010, 1026, 1028, 1020, 1030, 1010, 1000,
    990, 1000, 1000, 1005, 1028, 1009, 1001, 1003
  ],
  // KING(5)
  [
    1463, 1453, 1451, 1433, 1439, 1459, 1459, 1455,
    1467, 1461, 1461, 1449, 1451, 1465, 1467, 1473,
    1477, 1467, 1465, 1435, 1433, 1461, 1467, 1477,
    1473, 1469, 1457, 1431, 1431, 1453, 1467, 1469,
    1461, 1465, 1451, 1439, 1439, 1449, 1469, 1465,
    1477, 1487, 1459, 1459, 1459, 1461, 1471, 1483,
    1517, 1521, 1479, 1479, 1479, 1481, 1515, 1506,
    1519, 1525, 1491, 1514, 1484, 1498, 1519, 1505
  ]
];

// Define the ESG array with the specified type
const EGS_SOURCE: number[][] = [
  // PAWN(0)
  [
    60, 60, 60, 60, 60, 60, 60, 60,
    230, 212, 206, 206, 206, 210, 230, 230,
    156, 156, 134, 137, 147, 157, 165, 165,
    95, 95, 83, 79, 79, 90, 98, 108,
    76, 76, 70, 74, 74, 74, 82, 86,
    65, 63, 72, 78, 82, 70, 78, 76,
    70, 72, 82, 93, 93, 88, 77, 89,
    68, 68, 68, 68, 68, 68, 68, 68
  ],
  // KNIGHT(1)
  [
    224, 234, 244, 264, 250, 268, 240, 224,
    236, 260, 276, 276, 284, 276, 266, 246,
    248, 276, 292, 293, 299, 298, 278, 252,
    272, 291, 306, 305, 305, 300, 288, 265,
    263, 290, 299, 299, 307, 300, 279, 265,
    261, 275, 282, 294, 298, 283, 282, 259,
    237, 265, 269, 284, 280, 277, 257, 241,
    223, 237, 257, 259, 261, 255, 235, 250
  ],
  // BISHOP(2)
  [
    280, 302, 300, 304, 302, 294, 302, 280,
    292, 300, 314, 314, 302, 320, 300, 304,
    314, 322, 307, 316, 322, 305, 318, 312,
    312, 321, 329, 332, 332, 327, 329, 312,
    304, 314, 328, 326, 334, 332, 322, 308,
    306, 316, 307, 335, 331, 311, 319, 305,
    289, 302, 311, 323, 321, 311, 302, 293,
    277, 297, 301, 306, 310, 298, 306, 283
  ],
  // ROOK(3)
  [
    522, 523, 523, 521, 518, 523, 525, 526,
    527, 532, 532, 517, 524, 527, 531, 532,
    520, 528, 524, 512, 519, 521, 525, 527,
    524, 519, 525, 514, 514, 523, 522, 523,
    513, 514, 516, 510, 515, 521, 521, 522,
    511, 512, 512, 507, 511, 509, 515, 513,
    515, 510, 508, 510, 516, 514, 512, 513,
    507, 521, 521, 510, 514, 519, 525, 519
  ],
  // QUEEN(4)
  [
    1002, 1012, 1012, 1017, 1017, 1012, 1010, 988,
    1012, 1022, 1022, 1022, 1022, 1020, 1004, 994,
    1012, 1022, 1027, 1027, 1027, 1013, 1004, 996,
    1017, 1022, 1027, 1029, 1027, 1017, 1008, 1003,
    1017, 1025, 1030, 1030, 1032, 1018, 1015, 1003,
    1007, 1017, 1024, 1013, 1012, 1019, 1005, 1000,
    996, 1000, 1000, 1004, 1004, 1000, 1000, 990,
    980, 990, 990, 1001, 997, 995, 994, 995
  ],
  // KING(5)
  [
    1462, 1472, 1482, 1472, 1470, 1469, 1461, 1427,
    1483, 1493, 1503, 1501, 1505, 1497, 1493, 1479,
    1483, 1503, 1529, 1505, 1505, 1511, 1503, 1483,
    1479, 1503, 1515, 1515, 1515, 1509, 1499, 1471,
    1467, 1493, 1507, 1514, 1514, 1506, 1480, 1456,
    1470, 1490, 1502, 1506, 1504, 1496, 1484, 1458,
    1456, 1472, 1490, 1490, 1486, 1488, 1466, 1449,
    1423, 1449, 1461, 1457, 1458, 1459, 1449, 1429
  ]
];

export class PieceSquareTable {
  // Initialize MGS and EGS arrays to hold positional values for pieces
  public static MGS: number[][] = new Array(Piece.BLACK_KING + 1);
  public static EGS: number[][] = new Array(Piece.BLACK_KING + 1);

  static {
    for (let piece = 0; piece <= Piece.WHITE_KING; piece++) {
      PieceSquareTable.MGS[piece] = new Array(64);
      PieceSquareTable.MGS[piece + 8] = new Array(64);
      PieceSquareTable.EGS[piece] = new Array(64);
      PieceSquareTable.EGS[piece + 8] = new Array(64);

      for (let rank = 7; rank >= 0; rank--) {
        for (let file = 7; file >= 0; file--) {
          const index = rank * 8 + file;
          const mirrorIndexWhite = (7 - rank) * 8 + (7 - file);
          const mirrorIndexBlack = rank * 8 + (7 - file);

          const mgsValue = MGS_SOURCE[piece][index];
          PieceSquareTable.MGS[piece][mirrorIndexWhite] = mgsValue;
          PieceSquareTable.MGS[piece + 8][mirrorIndexBlack] = -mgsValue;

          const egsValue = EGS_SOURCE[piece][index];
          PieceSquareTable.EGS[piece][mirrorIndexWhite] = egsValue;
          PieceSquareTable.EGS[piece + 8][mirrorIndexBlack] = -egsValue;
        }
      }
    }
  }
}
